1. Trend Analysis

// Initialize an object to store trend data grouped by year and month
const trendData = {};
let invalidDataCount = 0; // Counter for invalid data
let processedItemsCount = 0; // Counter for processed items

// Iterate over each item to process the `posting_date_formatted`
items.forEach((item, index) => {
  const transactionId = item.json.transaction_id || `Unknown-${index}`;
  const costCenter = item.json.cost_center || "Unknown";
  const budgetAllocated = parseFloat(item.json.budget_allocated || 0);
  const actualSpending = parseFloat(item.json.actual_spending || 0);
  const postingDateFormatted = item.json.posting_date_formatted;

  // Check for missing or invalid values
  if (!postingDateFormatted) {
    console.warn(`Missing posting_date_formatted at index ${index} for transaction ID: ${transactionId}, cost center: ${costCenter}`);
    invalidDataCount++;
    return;
  }

  // Parse the posting_date_formatted to extract year and month
  const postingDate = new Date(postingDateFormatted);
  if (!isNaN(postingDate)) { // Ensure the date is valid
    const yearMonth = `${postingDate.getFullYear()}-${String(postingDate.getMonth() + 1).padStart(2, '0')}`;

    // Initialize the entry for this yearMonth if it doesn't exist
    if (!trendData[yearMonth]) {
      trendData[yearMonth] = {
        year_month: yearMonth,
        transactions: {}, // Store transactions by transaction_id
        total_budget_allocated: 0,
        total_actual_spending: 0,
        variance: 0,
        percentage_difference: "0%",
        status: "On Budget"
      };
    }

    // Add transaction details to the transactions object
    trendData[yearMonth].transactions[transactionId] = {
      cost_center: costCenter,
      budget_allocated: budgetAllocated,
      actual_spending: actualSpending
    };

    // Accumulate the budget and spending for this yearMonth
    trendData[yearMonth].total_budget_allocated += budgetAllocated;
    trendData[yearMonth].total_actual_spending += actualSpending;

    // Update variance, comparison, percentage_difference, and status
    const variance = trendData[yearMonth].total_actual_spending - trendData[yearMonth].total_budget_allocated;
    trendData[yearMonth].variance = variance.toFixed(2);

    if (variance > 0) {
      trendData[yearMonth].status = "Over Budget";
    } else if (variance < 0) {
      trendData[yearMonth].status = "Efficient";
    } else {
      trendData[yearMonth].status = "On Budget";
    }

    trendData[yearMonth].percentage_difference = trendData[yearMonth].total_budget_allocated !== 0
      ? ((variance / trendData[yearMonth].total_budget_allocated) * 100).toFixed(2) + "%"
      : "N/A";

    processedItemsCount++;
  } else {
    console.warn(`Invalid posting_date_formatted: "${postingDateFormatted}" at index ${index} for transaction ID: ${transactionId}, cost center: ${costCenter}`);
    invalidDataCount++;
  }
});

// Convert the trendData object into an array for output
const trendResults = Object.values(trendData).map(data => ({
  json: {
    year_month: data.year_month,
    total_budget_allocated: data.total_budget_allocated,
    total_actual_spending: data.total_actual_spending,
    variance: data.variance,
    percentage_difference: data.percentage_difference,
    status: data.status,
    transactions: data.transactions // Include transaction details
  }
}));

console.info(`Total processed items: ${processedItemsCount}`);
console.info(`Total invalid data entries: ${invalidDataCount}`);

// Return the trend analysis results
return trendResults;

2. Efficiency

// Initialize an array to store the results
const efficiencyResults = [];

// Define the estimated outcome ratio
const estimatedOutcomePerMillion = 1; // Asumsi: 1 outcome untuk setiap Rp 1,5 juta pengeluaran

// Iterate over each row of data
items.forEach(item => {
  // Parse transaction_id, actual spending, and cost center
  const transactionId = item.json.transaction_id || "Unknown-TXN"; // Default to "Unknown-TXN" if transaction_id is missing
  const actualSpending = parseFloat(item.json.actual_spending || 0);
  const costCenter = item.json.cost_center || "Unknown"; // Default to "Unknown" if cost_center is missing

  // Calculate estimated outcomes
  const estimatedOutcomes = actualSpending > 0 
    ? Math.ceil(actualSpending / 1500000 * estimatedOutcomePerMillion) // Use Math.ceil to ensure no fractional outcomes
    : 0; // Default to 0 outcomes if actual spending is 0

  // Calculate cost per outcome, default to null if estimated outcomes is 0
  const costPerOutcome = estimatedOutcomes > 0 
    ? actualSpending / estimatedOutcomes 
    : null;

  // Add the result for this transaction to the output
  efficiencyResults.push({
    json: {
      transaction_id: transactionId, // Include transaction_id in the result
      cost_center: costCenter,
      actual_spending: actualSpending,
      outcomes: estimatedOutcomes,
      cost_per_outcome: costPerOutcome
    }
  });
});

// Return the array of efficiency results
return efficiencyResults;

3. Contribution Margin Analysis

// Initialize an array to store the contribution margin analysis results
const contributionMarginResults = [];

// Iterate over each item to calculate contribution margin and contribution margin ratio
items.forEach(item => {
  const transactionId = item.json.transaction_id || "Unknown-TXN"; // Default to "Unknown-TXN" if transaction_id is missing
  const costCenter = item.json.cost_center || "Unknown"; // Default to "Unknown" if cost_center is missing
  const revenueGenerated = parseFloat(item.json.revenue_generated || 0);
  const variableCosts = parseFloat(item.json.variable_costs || 0);

  // Calculate contribution margin
  const contributionMargin = revenueGenerated - variableCosts;

  // Calculate contribution margin ratio (ensure no division by zero)
  const contributionMarginRatio = revenueGenerated > 0
    ? (contributionMargin / revenueGenerated) * 100
    : 0;

  // Add the result to the output array
  contributionMarginResults.push({
    json: {
      transaction_id: transactionId, // Include transaction_id in the result
      cost_center: costCenter,
      revenue_generated: revenueGenerated,
      variable_costs: variableCosts,
      contribution_margin: contributionMargin,
      contribution_margin_ratio: contributionMarginRatio.toFixed(2) // Rounded to 2 decimal places
    }
  });
});

// Return the contribution margin analysis results
return contributionMarginResults;

4. Profitability Analysis

// Initialize an array to store the profitability analysis results
const profitabilityResults = [];

// Iterate over each item to calculate profit and profit margin
items.forEach(item => {
  const transactionId = item.json.transaction_id || "Unknown-TXN"; // Default to "Unknown-TXN" if transaction_id is missing
  const costCenter = item.json.cost_center || "Unknown";
  const revenueGenerated = parseFloat(item.json.revenue_generated || 0);
  const fixedCosts = parseFloat(item.json.fixed_costs || 0);
  const variableCosts = parseFloat(item.json.variable_costs || 0);

  // Calculate profit
  const profit = revenueGenerated - (fixedCosts + variableCosts);

  // Calculate profit margin (ensure no division by zero)
  const profitMargin = revenueGenerated > 0
    ? (profit / revenueGenerated) * 100
    : 0;

  // Add the result to the output array
  profitabilityResults.push({
    json: {
      transaction_id: transactionId, // Include transaction_id in the result
      cost_center: costCenter,
      revenue_generated: revenueGenerated,
      fixed_costs: fixedCosts,
      variable_costs: variableCosts,
      profit: profit,
      profit_margin: profitMargin.toFixed(2) // Rounded to 2 decimal places
    }
  });
});

// Return the profitability analysis results
return profitabilityResults;

5. Outlier Detection

// Initialize an array to store the actual spending values and results
const actualSpendingValues = [];
const outlierDetectionResults = [];

// Step 1: Extract all actual spending values
items.forEach(item => {
  const transactionId = item.json.transaction_id || "Unknown-TXN"; // Default to "Unknown-TXN" if transaction_id is missing
  const costCenter = item.json.cost_center || "Unknown";
  const actualSpending = parseFloat(item.json.actual_spending || 0);

  // Add actual spending to the array if it's a valid number
  if (!isNaN(actualSpending)) {
    actualSpendingValues.push({ transactionId, costCenter, actualSpending });
  }
});

// Step 2: Calculate the IQR (Interquartile Range)
const sortedValues = actualSpendingValues.map(v => v.actualSpending).sort((a, b) => a - b);
const q1Index = Math.floor((sortedValues.length / 4));
const q3Index = Math.floor((3 * sortedValues.length) / 4);
const q1 = sortedValues[q1Index];
const q3 = sortedValues[q3Index];
const iqr = q3 - q1;

// Define lower and upper bounds
const lowerBound = q1 - 1.5 * iqr;
const upperBound = q3 + 1.5 * iqr;

// Step 3: Identify outliers based on the bounds
actualSpendingValues.forEach(({ transactionId, costCenter, actualSpending }) => {
  const isOutlier = actualSpending < lowerBound || actualSpending > upperBound;

  // Add to results with outlier flag
  outlierDetectionResults.push({
    json: {
      transaction_id: transactionId, // Include transaction_id in the result
      cost_center: costCenter,
      actual_spending: actualSpending,
      is_outlier: isOutlier,
      lower_bound: lowerBound,
      upper_bound: upperBound
    }
  });
});

// Return the outlier detection results
return outlierDetectionResults;

6. Budget Utilization Rate

// Process all items and ensure output is in the correct format
function processItems(items) {
  if (!Array.isArray(items) || items.length === 0) {
    throw new Error("Input 'items' must be a non-empty array.");
  }

  // Map over all items to ensure processing for each
  const results = items.map(item => {
    const transactionId = item.json.transaction_id || "Unknown-TXN"; // Default to "Unknown-TXN" if transaction_id is missing
    const costCenter = item.json.cost_center || "Unknown";
    const budgetAllocated = parseFloat(item.json.budget_allocated || 0);
    const actualSpending = parseFloat(item.json.actual_spending || 0);

    // Example calculation: Budget Utilization Rate
    const utilizationRate = budgetAllocated > 0
      ? (actualSpending / budgetAllocated) * 100
      : 0;

    // Return processed object
    return {
      json: {
        transaction_id: transactionId, // Include transaction_id in the result
        cost_center: costCenter,
        budget_allocated: budgetAllocated,
        actual_spending: actualSpending,
        utilization_rate: utilizationRate.toFixed(2) // Rounded to 2 decimal places
      }
    };
  });

  // Ensure the results array is returned
  return results;
}

// Example execution
try {
  const output = processItems(items); // Use items as input
  console.log(`Processed ${output.length} items.`);
  console.log(output);
  return output; // Return for n8n
} catch (error) {
  console.error("Error processing items:", error.message);
  throw error; // Re-throw error for debugging
}

7. Forecasting Analysis

function forecastingAnalysis(items) {
  // Process each item in the input
  const results = items.map(item => {
    const transactionId = item.json.transaction_id || "Unknown-TXN"; // Default to "Unknown-TXN" if transaction_id is missing
    const costCenter = item.json.cost_center || "Unknown";
    const pastSpendings = item.json.past_spendings
      ? item.json.past_spendings.split('|').map(Number)
      : [];

    // Ensure pastSpendings is a valid array of numbers
    if (pastSpendings.length === 0 || pastSpendings.some(isNaN)) {
      return {
        json: {
          transaction_id: transactionId,
          cost_center: costCenter,
          forecasted_spending: null,
          message: "No valid historical data available for forecasting."
        }
      };
    }

    // Calculate forecasted spending using the Simple Moving Average
    const totalSpendings = pastSpendings.reduce((sum, spending) => sum + spending, 0);
    const forecastedSpending = totalSpendings / pastSpendings.length;

    // Return the result for this item
    return {
      json: {
        transaction_id: transactionId,
        cost_center: costCenter,
        past_spendings: pastSpendings,
        forecasted_spending: forecastedSpending.toFixed(2)
      }
    };
  });

  return results; // Return the array of results
}

return forecastingAnalysis(items);

8. Break-Even Analysis

function calculateBreakEvenAnalysis(items) {
  // Map over all items to process each one
  const results = items.map(item => {
    const transactionId = item.json.transaction_id || "Unknown-TXN"; // Default to "Unknown-TXN" if transaction_id is missing
    const costCenter = item.json.cost_center || "Unknown";
    const fixedCosts = parseFloat(item.json.fixed_costs || 0);
    const revenuePerUnit = parseFloat(item.json.revenue_per_unit || 0);
    const variableCostPerUnit = parseFloat(item.json.variable_cost_per_unit || 0);

    // Validate inputs
    if (revenuePerUnit <= variableCostPerUnit) {
      return {
        json: {
          transaction_id: transactionId,
          cost_center: costCenter,
          break_even_point_units: null,
          message: "Revenue per unit must be greater than variable cost per unit to calculate break-even."
        }
      };
    }

    // Calculate Break-Even Point (Units)
    const breakEvenPoint = fixedCosts / (revenuePerUnit - variableCostPerUnit);

    // Return result for this item
    return {
      json: {
        transaction_id: transactionId,
        cost_center: costCenter,
        fixed_costs: fixedCosts,
        revenue_per_unit: revenuePerUnit,
        variable_cost_per_unit: variableCostPerUnit,
        break_even_point_units: breakEvenPoint.toFixed(2)
      }
    };
  });

  // Return all results
  return results;
}

return calculateBreakEvenAnalysis(items);

9. Scenario Analysis

function scenarioAnalysis(items, scenarios) {
  // Process each item in the input
  const results = items.map(item => {
    const transactionId = item.json.transaction_id || "Unknown-TXN"; // Default to "Unknown-TXN" if transaction_id is missing
    const costCenter = item.json.cost_center || "Unknown";
    const budgetAllocated = parseFloat(item.json.budget_allocated || 0);

    // Ensure budgetAllocated is valid
    if (isNaN(budgetAllocated) || budgetAllocated <= 0) {
      return {
        json: {
          transaction_id: transactionId,
          cost_center: costCenter,
          budget_allocated: budgetAllocated,
          scenarios: null,
          message: "Invalid or missing budget_allocated value for scenario analysis."
        }
      };
    }

    // Analyze different scenario percentages
    const scenarioResults = scenarios.map(percentage => {
      const adjustedBudget = budgetAllocated * (percentage / 100);
      return {
        percentage: `${percentage}%`,
        adjusted_budget: adjustedBudget.toFixed(2)
      };
    });

    // Return the result for this item
    return {
      json: {
        transaction_id: transactionId,
        cost_center: costCenter,
        budget_allocated: budgetAllocated,
        scenarios: scenarioResults
      }
    };
  });

  return results; // Return the array of results
}

// Define the scenario percentages (e.g., -20%, baseline 100%, +20%)
const scenarios = [80, 100, 120];

return scenarioAnalysis(items, scenarios);

10. Comparative Analysis

function comparativeAnalysis(items) {
  // Process each item in the input
  const results = items.map(item => {
    const transactionId = item.json.transaction_id || "Unknown-TXN"; // Default to "Unknown-TXN" if transaction_id is missing
    const costCenter = item.json.cost_center || "Unknown";
    const budgetAllocated = parseFloat(item.json.budget_allocated || 0);
    const actualSpending = parseFloat(item.json.actual_spending || 0);

    // Ensure both budgetAllocated and actualSpending are valid
    if (isNaN(budgetAllocated) || isNaN(actualSpending) || budgetAllocated <= 0) {
      return {
        json: {
          transaction_id: transactionId,
          cost_center: costCenter,
          budget_allocated: budgetAllocated,
          actual_spending: actualSpending,
          comparison: null,
          variance: null,
          percentage_difference: null,
          status: null,
          message: "Invalid or missing values for budget_allocated or actual_spending."
        }
      };
    }

    // Perform the comparative analysis
    let comparison, status;
    const variance = actualSpending - budgetAllocated;
    if (variance < 0) {
      comparison = "Under Budget";
      status = "Efficient";
    } else if (variance === 0) {
      comparison = "On Budget";
      status = "On Budget";
    } else {
      comparison = "Over Budget";
      status = "Over Budget";
    }

    // Calculate the percentage difference
    const percentageDifference = ((variance / budgetAllocated) * 100).toFixed(2);

    // Return the result for this item
    return {
      json: {
        transaction_id: transactionId,
        cost_center: costCenter,
        budget_allocated: budgetAllocated,
        actual_spending: actualSpending,
        variance: variance.toFixed(2),
        comparison: comparison,
        percentage_difference: `${percentageDifference}%`,
        status: status
      }
    };
  });

  return results; // Return the array of results
}

return comparativeAnalysis(items);

